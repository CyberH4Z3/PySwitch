[
    {
        "name": "RIG_VOLUME_BOOST",
        "parameters": [
            {
                "name": "boost_volume",
                "default": null,
                "comment": "Boost volume: A value in range [0..1] (corresponding to the range of the\nrig volume parameter of the Kemper: 0.5 is 0dB, 0.75 is +6dB, 1.0 is +12dB etc.)",
                "meta": {
                    "data": {
                        "name": "boost_volume",
                        "type": "float",
                        "range": {
                            "min": 0,
                            "max": 1
                        }
                    }
                }
            },
            {
                "name": "display",
                "default": "None",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "display",
                        "type": "any",
                        "comment": "DisplayLabel identifier (must be defined in display.py)"
                    }
                }
            },
            {
                "name": "mode",
                "default": "PushButtonAction.HOLD_MOMENTARY",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "mode",
                        "type": "select",
                        "comment": "Mode of operation",
                        "values": [
                            {
                                "name": "Latch",
                                "value": "PushButtonAction.LATCH"
                            },
                            {
                                "name": "Latch (momentary on long press)",
                                "value": "PushButtonAction.HOLD_MOMENTARY"
                            },
                            {
                                "name": "Momentary",
                                "value": "PushButtonAction.MOMENTARY"
                            },
                            {
                                "name": "Momentary (inverse)",
                                "value": "PushButtonAction.MOMENTARY_INVERSE"
                            },
                            {
                                "name": "Enable only",
                                "value": "PushButtonAction.ENABLE"
                            },
                            {
                                "name": "Disable only",
                                "value": "PushButtonAction.DISABLE"
                            },
                            {
                                "name": "One Shot",
                                "value": "PushButtonAction.ONE_SHOT"
                            }
                        ]
                    }
                }
            },
            {
                "name": "color",
                "default": "Colors.PINK",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "color",
                        "type": "color"
                    }
                }
            },
            {
                "name": "id",
                "default": "False",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "id",
                        "advanced": true,
                        "type": "any",
                        "comment": "This ID can be used for Paging or custom callbacks, to enable/disable the action."
                    }
                }
            },
            {
                "name": "use_leds",
                "default": "True",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "use_leds",
                        "type": "bool",
                        "comment": "If disabled, the action will not use the LEDs of the switch"
                    }
                }
            },
            {
                "name": "text",
                "default": "\"RigBoost\"",
                "comment": null,
                "meta": {
                    "data": {}
                }
            },
            {
                "name": "remember_off_value",
                "default": "True",
                "comment": "If set, the boost will return to the former rig volume at disabling",
                "meta": {
                    "data": {}
                }
            },
            {
                "name": "enable_callback",
                "default": "None",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "enable_callback",
                        "advanced": true,
                        "type": "any",
                        "comment": "Callback instance to control dynamically whether the action should be enabled."
                    }
                }
            }
        ],
        "comment": "Volume boost function, based on setting rig volume to a certain boost value.",
        "importPath": "pyswitch.clients.kemper.actions.rig_volume_boost",
        "meta": {
            "data": {
                "category": "rig"
            }
        }
    },
    {
        "name": "LOOPER_REC_PLAY_OVERDUB",
        "parameters": [
            {
                "name": "display",
                "default": "None",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "display",
                        "type": "any",
                        "comment": "DisplayLabel identifier (must be defined in display.py)"
                    }
                }
            },
            {
                "name": "text",
                "default": "\"Rec\"",
                "comment": null,
                "meta": {
                    "data": {}
                }
            },
            {
                "name": "color",
                "default": "Colors.RED",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "color",
                        "type": "color"
                    }
                }
            },
            {
                "name": "id",
                "default": "False",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "id",
                        "advanced": true,
                        "type": "any",
                        "comment": "This ID can be used for Paging or custom callbacks, to enable/disable the action."
                    }
                }
            },
            {
                "name": "use_leds",
                "default": "True",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "use_leds",
                        "type": "bool",
                        "comment": "If disabled, the action will not use the LEDs of the switch"
                    }
                }
            },
            {
                "name": "enable_callback",
                "default": "None",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "enable_callback",
                        "advanced": true,
                        "type": "any",
                        "comment": "Callback instance to control dynamically whether the action should be enabled."
                    }
                }
            }
        ],
        "comment": "Looper: Play/Rec/Overdub",
        "importPath": "pyswitch.clients.kemper.actions.looper",
        "meta": {
            "data": {
                "category": "looper"
            }
        }
    },
    {
        "name": "LOOPER_STOP",
        "parameters": [
            {
                "name": "display",
                "default": "None",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "display",
                        "type": "any",
                        "comment": "DisplayLabel identifier (must be defined in display.py)"
                    }
                }
            },
            {
                "name": "text",
                "default": "\"Stop\"",
                "comment": null,
                "meta": {
                    "data": {}
                }
            },
            {
                "name": "color",
                "default": "Colors.WHITE",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "color",
                        "type": "color"
                    }
                }
            },
            {
                "name": "id",
                "default": "False",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "id",
                        "advanced": true,
                        "type": "any",
                        "comment": "This ID can be used for Paging or custom callbacks, to enable/disable the action."
                    }
                }
            },
            {
                "name": "use_leds",
                "default": "True",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "use_leds",
                        "type": "bool",
                        "comment": "If disabled, the action will not use the LEDs of the switch"
                    }
                }
            },
            {
                "name": "enable_callback",
                "default": "None",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "enable_callback",
                        "advanced": true,
                        "type": "any",
                        "comment": "Callback instance to control dynamically whether the action should be enabled."
                    }
                }
            }
        ],
        "comment": "Looper: Stop",
        "importPath": "pyswitch.clients.kemper.actions.looper",
        "meta": {
            "data": {
                "category": "looper"
            }
        }
    },
    {
        "name": "LOOPER_ERASE",
        "parameters": [
            {
                "name": "display",
                "default": "None",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "display",
                        "type": "any",
                        "comment": "DisplayLabel identifier (must be defined in display.py)"
                    }
                }
            },
            {
                "name": "text",
                "default": "\"Erase\"",
                "comment": null,
                "meta": {
                    "data": {}
                }
            },
            {
                "name": "color",
                "default": "Colors.LIGHT_RED",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "color",
                        "type": "color"
                    }
                }
            },
            {
                "name": "id",
                "default": "False",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "id",
                        "advanced": true,
                        "type": "any",
                        "comment": "This ID can be used for Paging or custom callbacks, to enable/disable the action."
                    }
                }
            },
            {
                "name": "use_leds",
                "default": "True",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "use_leds",
                        "type": "bool",
                        "comment": "If disabled, the action will not use the LEDs of the switch"
                    }
                }
            },
            {
                "name": "enable_callback",
                "default": "None",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "enable_callback",
                        "advanced": true,
                        "type": "any",
                        "comment": "Callback instance to control dynamically whether the action should be enabled."
                    }
                }
            }
        ],
        "comment": "Looper: Erase",
        "importPath": "pyswitch.clients.kemper.actions.looper",
        "meta": {
            "data": {
                "category": "looper"
            }
        }
    },
    {
        "name": "LOOPER_CANCEL",
        "parameters": [
            {
                "name": "display",
                "default": "None",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "display",
                        "type": "any",
                        "comment": "DisplayLabel identifier (must be defined in display.py)"
                    }
                }
            },
            {
                "name": "text",
                "default": "\"Undo\"",
                "comment": null,
                "meta": {
                    "data": {}
                }
            },
            {
                "name": "color",
                "default": "Colors.YELLOW",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "color",
                        "type": "color"
                    }
                }
            },
            {
                "name": "id",
                "default": "False",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "id",
                        "advanced": true,
                        "type": "any",
                        "comment": "This ID can be used for Paging or custom callbacks, to enable/disable the action."
                    }
                }
            },
            {
                "name": "use_leds",
                "default": "True",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "use_leds",
                        "type": "bool",
                        "comment": "If disabled, the action will not use the LEDs of the switch"
                    }
                }
            },
            {
                "name": "enable_callback",
                "default": "None",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "enable_callback",
                        "advanced": true,
                        "type": "any",
                        "comment": "Callback instance to control dynamically whether the action should be enabled."
                    }
                }
            }
        ],
        "comment": "Looper: Cancel",
        "importPath": "pyswitch.clients.kemper.actions.looper",
        "meta": {
            "data": {
                "category": "looper"
            }
        }
    },
    {
        "name": "LOOPER_REVERSE",
        "parameters": [
            {
                "name": "display",
                "default": "None",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "display",
                        "type": "any",
                        "comment": "DisplayLabel identifier (must be defined in display.py)"
                    }
                }
            },
            {
                "name": "text",
                "default": "\"Reverse\"",
                "comment": null,
                "meta": {
                    "data": {}
                }
            },
            {
                "name": "color",
                "default": "Colors.LIGHT_GREEN",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "color",
                        "type": "color"
                    }
                }
            },
            {
                "name": "id",
                "default": "False",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "id",
                        "advanced": true,
                        "type": "any",
                        "comment": "This ID can be used for Paging or custom callbacks, to enable/disable the action."
                    }
                }
            },
            {
                "name": "use_leds",
                "default": "True",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "use_leds",
                        "type": "bool",
                        "comment": "If disabled, the action will not use the LEDs of the switch"
                    }
                }
            },
            {
                "name": "enable_callback",
                "default": "None",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "enable_callback",
                        "advanced": true,
                        "type": "any",
                        "comment": "Callback instance to control dynamically whether the action should be enabled."
                    }
                }
            }
        ],
        "comment": "Looper: Reverse",
        "importPath": "pyswitch.clients.kemper.actions.looper",
        "meta": {
            "data": {
                "category": "looper"
            }
        }
    },
    {
        "name": "LOOPER_TRIGGER",
        "parameters": [
            {
                "name": "display",
                "default": "None",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "display",
                        "type": "any",
                        "comment": "DisplayLabel identifier (must be defined in display.py)"
                    }
                }
            },
            {
                "name": "text",
                "default": "\"Trigger\"",
                "comment": null,
                "meta": {
                    "data": {}
                }
            },
            {
                "name": "color",
                "default": "Colors.LIGHT_BLUE",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "color",
                        "type": "color"
                    }
                }
            },
            {
                "name": "id",
                "default": "False",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "id",
                        "advanced": true,
                        "type": "any",
                        "comment": "This ID can be used for Paging or custom callbacks, to enable/disable the action."
                    }
                }
            },
            {
                "name": "use_leds",
                "default": "True",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "use_leds",
                        "type": "bool",
                        "comment": "If disabled, the action will not use the LEDs of the switch"
                    }
                }
            },
            {
                "name": "enable_callback",
                "default": "None",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "enable_callback",
                        "advanced": true,
                        "type": "any",
                        "comment": "Callback instance to control dynamically whether the action should be enabled."
                    }
                }
            }
        ],
        "comment": "Trigger",
        "importPath": "pyswitch.clients.kemper.actions.looper",
        "meta": {
            "data": {
                "category": "looper"
            }
        }
    },
    {
        "name": "LOOPER_HALF_SPEED",
        "parameters": [
            {
                "name": "display",
                "default": "None",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "display",
                        "type": "any",
                        "comment": "DisplayLabel identifier (must be defined in display.py)"
                    }
                }
            },
            {
                "name": "text",
                "default": "\"HalfSpd\"",
                "comment": null,
                "meta": {
                    "data": {}
                }
            },
            {
                "name": "color",
                "default": "Colors.ORANGE",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "color",
                        "type": "color"
                    }
                }
            },
            {
                "name": "id",
                "default": "False",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "id",
                        "advanced": true,
                        "type": "any",
                        "comment": "This ID can be used for Paging or custom callbacks, to enable/disable the action."
                    }
                }
            },
            {
                "name": "use_leds",
                "default": "True",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "use_leds",
                        "type": "bool",
                        "comment": "If disabled, the action will not use the LEDs of the switch"
                    }
                }
            },
            {
                "name": "enable_callback",
                "default": "None",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "enable_callback",
                        "advanced": true,
                        "type": "any",
                        "comment": "Callback instance to control dynamically whether the action should be enabled."
                    }
                }
            }
        ],
        "comment": "Looper: Half speed",
        "importPath": "pyswitch.clients.kemper.actions.looper",
        "meta": {
            "data": {
                "category": "looper"
            }
        }
    },
    {
        "name": "MORPH_BUTTON",
        "parameters": [
            {
                "name": "display",
                "default": "None",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "display",
                        "type": "any",
                        "comment": "DisplayLabel identifier (must be defined in display.py)"
                    }
                }
            },
            {
                "name": "text",
                "default": "\"Morph\"",
                "comment": null,
                "meta": {
                    "data": {}
                }
            },
            {
                "name": "id",
                "default": "False",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "id",
                        "advanced": true,
                        "type": "any",
                        "comment": "This ID can be used for Paging or custom callbacks, to enable/disable the action."
                    }
                }
            },
            {
                "name": "use_leds",
                "default": "True",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "use_leds",
                        "type": "bool",
                        "comment": "If disabled, the action will not use the LEDs of the switch"
                    }
                }
            },
            {
                "name": "enable_callback",
                "default": "None",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "enable_callback",
                        "advanced": true,
                        "type": "any",
                        "comment": "Callback instance to control dynamically whether the action should be enabled."
                    }
                }
            },
            {
                "name": "color",
                "default": "\"kemper\"",
                "comment": "Can be \"kemper\" or a fixed color",
                "meta": {
                    "data": {
                        "name": "color",
                        "type": "color"
                    }
                }
            },
            {
                "name": "morph_color_base",
                "default": "Colors.RED",
                "comment": "Only used if color = \"kemper\"",
                "meta": {
                    "data": {}
                }
            },
            {
                "name": "morph_color_morphed",
                "default": "Colors.BLUE",
                "comment": "Only used if color = \"kemper\"",
                "meta": {
                    "data": {}
                }
            }
        ],
        "comment": "Morph button (faded change of morph state)",
        "importPath": "pyswitch.clients.kemper.actions.morph",
        "meta": {
            "data": {
                "category": "morph"
            }
        }
    },
    {
        "name": "MORPH_DISPLAY",
        "parameters": [
            {
                "name": "display",
                "default": "None",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "display",
                        "type": "any",
                        "comment": "DisplayLabel identifier (must be defined in display.py)"
                    }
                }
            },
            {
                "name": "text",
                "default": "\"Morph\"",
                "comment": null,
                "meta": {
                    "data": {}
                }
            },
            {
                "name": "id",
                "default": "False",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "id",
                        "advanced": true,
                        "type": "any",
                        "comment": "This ID can be used for Paging or custom callbacks, to enable/disable the action."
                    }
                }
            },
            {
                "name": "use_leds",
                "default": "True",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "use_leds",
                        "type": "bool",
                        "comment": "If disabled, the action will not use the LEDs of the switch"
                    }
                }
            },
            {
                "name": "enable_callback",
                "default": "None",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "enable_callback",
                        "advanced": true,
                        "type": "any",
                        "comment": "Callback instance to control dynamically whether the action should be enabled."
                    }
                }
            },
            {
                "name": "morph_color_base",
                "default": "Colors.RED",
                "comment": null,
                "meta": {
                    "data": {}
                }
            },
            {
                "name": "morph_color_morphed",
                "default": "Colors.BLUE",
                "comment": null,
                "meta": {
                    "data": {}
                }
            }
        ],
        "comment": "Morph state (display/LEDs only)",
        "importPath": "pyswitch.clients.kemper.actions.morph",
        "meta": {
            "data": {
                "category": "morph"
            }
        }
    },
    {
        "name": "TAP_TEMPO",
        "parameters": [
            {
                "name": "display",
                "default": "None",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "display",
                        "type": "any",
                        "comment": "DisplayLabel identifier (must be defined in display.py)"
                    }
                }
            },
            {
                "name": "color",
                "default": "Colors.DARK_GREEN",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "color",
                        "type": "color"
                    }
                }
            },
            {
                "name": "id",
                "default": "False",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "id",
                        "advanced": true,
                        "type": "any",
                        "comment": "This ID can be used for Paging or custom callbacks, to enable/disable the action."
                    }
                }
            },
            {
                "name": "use_leds",
                "default": "True",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "use_leds",
                        "type": "bool",
                        "comment": "If disabled, the action will not use the LEDs of the switch"
                    }
                }
            },
            {
                "name": "enable_callback",
                "default": "None",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "enable_callback",
                        "advanced": true,
                        "type": "any",
                        "comment": "Callback instance to control dynamically whether the action should be enabled."
                    }
                }
            }
        ],
        "comment": "Tap tempo",
        "importPath": "pyswitch.clients.kemper.actions.tempo",
        "meta": {
            "data": {
                "category": "tempo"
            }
        }
    },
    {
        "name": "SHOW_TEMPO",
        "parameters": [
            {
                "name": "display",
                "default": "None",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "display",
                        "type": "any",
                        "comment": "DisplayLabel identifier (must be defined in display.py)"
                    }
                }
            },
            {
                "name": "color",
                "default": "Colors.LIGHT_GREEN",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "color",
                        "type": "color"
                    }
                }
            },
            {
                "name": "text",
                "default": "\"Tempo\"",
                "comment": null,
                "meta": {
                    "data": {}
                }
            },
            {
                "name": "id",
                "default": "False",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "id",
                        "advanced": true,
                        "type": "any",
                        "comment": "This ID can be used for Paging or custom callbacks, to enable/disable the action."
                    }
                }
            },
            {
                "name": "use_leds",
                "default": "True",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "use_leds",
                        "type": "bool",
                        "comment": "If disabled, the action will not use the LEDs of the switch"
                    }
                }
            },
            {
                "name": "enable_callback",
                "default": "None",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "enable_callback",
                        "advanced": true,
                        "type": "any",
                        "comment": "Callback instance to control dynamically whether the action should be enabled."
                    }
                }
            },
            {
                "name": "led_brightness_on",
                "default": "0.02",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "led_brightness_on",
                        "type": "float",
                        "advanced": true
                    }
                }
            },
            {
                "name": "led_brightness_off",
                "default": "0",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "led_brightness_off",
                        "type": "float",
                        "advanced": true
                    }
                }
            }
        ],
        "comment": "Show tempo (blinks on every beat)",
        "importPath": "pyswitch.clients.kemper.actions.tempo",
        "meta": {
            "data": {
                "category": "tempo"
            }
        }
    },
    {
        "name": "EFFECT_STATE",
        "parameters": [
            {
                "name": "slot_id",
                "default": null,
                "comment": null,
                "meta": {
                    "data": {
                        "name": "slot_id",
                        "type": "select",
                        "values": [
                            {
                                "name": "Slot A",
                                "value": "KemperEffectSlot.EFFECT_SLOT_ID_A"
                            },
                            {
                                "name": "Slot B",
                                "value": "KemperEffectSlot.EFFECT_SLOT_ID_B"
                            },
                            {
                                "name": "Slot C",
                                "value": "KemperEffectSlot.EFFECT_SLOT_ID_C"
                            },
                            {
                                "name": "Slot D",
                                "value": "KemperEffectSlot.EFFECT_SLOT_ID_D"
                            },
                            {
                                "name": "Slot X",
                                "value": "KemperEffectSlot.EFFECT_SLOT_ID_X"
                            },
                            {
                                "name": "Slot MOD",
                                "value": "KemperEffectSlot.EFFECT_SLOT_ID_MOD"
                            },
                            {
                                "name": "Slot DLY",
                                "value": "KemperEffectSlot.EFFECT_SLOT_ID_DLY"
                            },
                            {
                                "name": "Slot REV",
                                "value": "KemperEffectSlot.EFFECT_SLOT_ID_REV"
                            }
                        ]
                    }
                }
            },
            {
                "name": "display",
                "default": "None",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "display",
                        "type": "any",
                        "comment": "DisplayLabel identifier (must be defined in display.py)"
                    }
                }
            },
            {
                "name": "mode",
                "default": "PushButtonAction.HOLD_MOMENTARY",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "mode",
                        "type": "select",
                        "comment": "Mode of operation",
                        "values": [
                            {
                                "name": "Latch",
                                "value": "PushButtonAction.LATCH"
                            },
                            {
                                "name": "Latch (momentary on long press)",
                                "value": "PushButtonAction.HOLD_MOMENTARY"
                            },
                            {
                                "name": "Momentary",
                                "value": "PushButtonAction.MOMENTARY"
                            },
                            {
                                "name": "Momentary (inverse)",
                                "value": "PushButtonAction.MOMENTARY_INVERSE"
                            },
                            {
                                "name": "Enable only",
                                "value": "PushButtonAction.ENABLE"
                            },
                            {
                                "name": "Disable only",
                                "value": "PushButtonAction.DISABLE"
                            },
                            {
                                "name": "One Shot",
                                "value": "PushButtonAction.ONE_SHOT"
                            }
                        ]
                    }
                }
            },
            {
                "name": "id",
                "default": "False",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "id",
                        "advanced": true,
                        "type": "any",
                        "comment": "This ID can be used for Paging or custom callbacks, to enable/disable the action."
                    }
                }
            },
            {
                "name": "use_leds",
                "default": "True",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "use_leds",
                        "type": "bool",
                        "comment": "If disabled, the action will not use the LEDs of the switch"
                    }
                }
            },
            {
                "name": "enable_callback",
                "default": "None",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "enable_callback",
                        "advanced": true,
                        "type": "any",
                        "comment": "Callback instance to control dynamically whether the action should be enabled."
                    }
                }
            }
        ],
        "comment": "Switch an effect slot on / off",
        "importPath": "pyswitch.clients.kemper.actions.effect_state",
        "meta": {
            "data": {
                "category": "effects"
            }
        }
    },
    {
        "name": "BANK_UP",
        "parameters": [
            {
                "name": "display",
                "default": "None",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "display",
                        "type": "any",
                        "comment": "DisplayLabel identifier (must be defined in display.py)"
                    }
                }
            },
            {
                "name": "id",
                "default": "False",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "id",
                        "advanced": true,
                        "type": "any",
                        "comment": "This ID can be used for Paging or custom callbacks, to enable/disable the action."
                    }
                }
            },
            {
                "name": "use_leds",
                "default": "True",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "use_leds",
                        "type": "bool",
                        "comment": "If disabled, the action will not use the LEDs of the switch"
                    }
                }
            },
            {
                "name": "enable_callback",
                "default": "None",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "enable_callback",
                        "advanced": true,
                        "type": "any",
                        "comment": "Callback instance to control dynamically whether the action should be enabled."
                    }
                }
            },
            {
                "name": "dim_factor",
                "default": "\"off\"",
                "comment": "Can be \"off\", \"on\" or a value in range [0..1]",
                "meta": {
                    "data": {
                        "name": "dim_factor",
                        "advanced": true,
                        "type": "any",
                        "comment": "Dim factor for the display"
                    }
                }
            },
            {
                "name": "led_brightness",
                "default": "\"off\"",
                "comment": "Can be \"off\", \"on\" or a value in range [0..1]",
                "meta": {
                    "data": {
                        "name": "led_brightness",
                        "advanced": true,
                        "type": "any",
                        "comment": "Brightness factor for the LED(s)"
                    }
                }
            },
            {
                "name": "text",
                "default": "\"Bank up\"",
                "comment": null,
                "meta": {
                    "data": {}
                }
            },
            {
                "name": "text_callback",
                "default": "None",
                "comment": "Optional callback for setting the text. Footprint: def callback(action, bank, rig) -> String where bank and rig are int starting from 0.",
                "meta": {
                    "data": {
                        "name": "text_callback",
                        "advanced": true,
                        "type": "any"
                    }
                }
            },
            {
                "name": "color",
                "default": "None",
                "comment": "Override color (if no color_callback is passed)",
                "meta": {
                    "data": {
                        "name": "color",
                        "type": "color"
                    }
                }
            },
            {
                "name": "color_callback",
                "default": "None",
                "comment": "Optional callback for setting the color. Footprint: def callback(action, bank, rig) -> (r, g, b) where bank and rig are int starting from 0.",
                "meta": {
                    "data": {
                        "name": "color_callback",
                        "advanced": true,
                        "type": "any"
                    }
                }
            },
            {
                "name": "display_mode",
                "default": "RIG_SELECT_DISPLAY_CURRENT_RIG",
                "comment": "Display mode (same as for RIG_SELECT, see definitions above)",
                "meta": {
                    "data": {
                        "name": "display_mode",
                        "comment": "Decides how the colors and texts are determined.",
                        "type": "select",
                        "values": [
                            {
                                "name": "Target Rig",
                                "value": "RIG_SELECT_DISPLAY_TARGET_RIG"
                            },
                            {
                                "name": "Current Rig",
                                "value": "RIG_SELECT_DISPLAY_CURRENT_RIG"
                            }
                        ]
                    }
                }
            },
            {
                "name": "preselect",
                "default": "False",
                "comment": "Preselect mode",
                "meta": {
                    "data": {}
                }
            }
        ],
        "comment": "Next bank (keeps rig index)",
        "importPath": "pyswitch.clients.kemper.actions.bank_up_down",
        "meta": {
            "data": {
                "category": "bank"
            }
        }
    },
    {
        "name": "BANK_DOWN",
        "parameters": [
            {
                "name": "display",
                "default": "None",
                "comment": "Reference to a DisplayLabel",
                "meta": {
                    "data": {
                        "name": "display",
                        "type": "any",
                        "comment": "DisplayLabel identifier (must be defined in display.py)"
                    }
                }
            },
            {
                "name": "id",
                "default": "False",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "id",
                        "advanced": true,
                        "type": "any",
                        "comment": "This ID can be used for Paging or custom callbacks, to enable/disable the action."
                    }
                }
            },
            {
                "name": "use_leds",
                "default": "True",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "use_leds",
                        "type": "bool",
                        "comment": "If disabled, the action will not use the LEDs of the switch"
                    }
                }
            },
            {
                "name": "enable_callback",
                "default": "None",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "enable_callback",
                        "advanced": true,
                        "type": "any",
                        "comment": "Callback instance to control dynamically whether the action should be enabled."
                    }
                }
            },
            {
                "name": "dim_factor",
                "default": "\"off\"",
                "comment": "Can be \"off\", \"on\" or a value in range [0..1]",
                "meta": {
                    "data": {
                        "name": "dim_factor",
                        "advanced": true,
                        "type": "any",
                        "comment": "Dim factor for the display"
                    }
                }
            },
            {
                "name": "led_brightness",
                "default": "\"off\"",
                "comment": "Can be \"off\", \"on\" or a value in range [0..1]",
                "meta": {
                    "data": {
                        "name": "led_brightness",
                        "advanced": true,
                        "type": "any",
                        "comment": "Brightness factor for the LED(s)"
                    }
                }
            },
            {
                "name": "text",
                "default": "\"Bank dn\"",
                "comment": null,
                "meta": {
                    "data": {}
                }
            },
            {
                "name": "text_callback",
                "default": "None",
                "comment": "Optional callback for setting the text. Footprint: def callback(action, bank, rig) -> String where bank and rig are int starting from 0.",
                "meta": {
                    "data": {
                        "name": "text_callback",
                        "advanced": true,
                        "type": "any"
                    }
                }
            },
            {
                "name": "color",
                "default": "None",
                "comment": "Override color (if no color_callback is passed)",
                "meta": {
                    "data": {
                        "name": "color",
                        "type": "color"
                    }
                }
            },
            {
                "name": "color_callback",
                "default": "None",
                "comment": "Optional callback for setting the color. Footprint: def callback(action, bank, rig) -> (r, g, b) where bank and rig are int starting from 0.",
                "meta": {
                    "data": {
                        "name": "color_callback",
                        "advanced": true,
                        "type": "any"
                    }
                }
            },
            {
                "name": "display_mode",
                "default": "RIG_SELECT_DISPLAY_CURRENT_RIG",
                "comment": "Display mode (same as for RIG_SELECT, see definitions above)",
                "meta": {
                    "data": {
                        "name": "display_mode",
                        "comment": "Decides how the colors and texts are determined.",
                        "type": "select",
                        "values": [
                            {
                                "name": "Target Rig",
                                "value": "RIG_SELECT_DISPLAY_TARGET_RIG"
                            },
                            {
                                "name": "Current Rig",
                                "value": "RIG_SELECT_DISPLAY_CURRENT_RIG"
                            }
                        ]
                    }
                }
            },
            {
                "name": "preselect",
                "default": "False",
                "comment": "Preselect mode",
                "meta": {
                    "data": {}
                }
            }
        ],
        "comment": "Previous bank (keeps rig index)",
        "importPath": "pyswitch.clients.kemper.actions.bank_up_down",
        "meta": {
            "data": {
                "category": "bank"
            }
        }
    },
    {
        "name": "RIG_SELECT_AND_MORPH_STATE",
        "parameters": [
            {
                "name": "rig",
                "default": null,
                "comment": null,
                "meta": {
                    "data": {
                        "name": "rig",
                        "type": "int",
                        "range": {
                            "min": 1,
                            "max": "NUM_RIGS_PER_BANK"
                        }
                    }
                }
            },
            {
                "name": "rig_off",
                "default": "None",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "rig_off",
                        "type": "int",
                        "range": {
                            "min": 1,
                            "max": "NUM_RIGS_PER_BANK",
                            "none": true
                        }
                    }
                }
            },
            {
                "name": "bank",
                "default": "None",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "bank",
                        "type": "int",
                        "range": {
                            "min": 1,
                            "max": "NUM_BANKS"
                        }
                    }
                }
            },
            {
                "name": "bank_off",
                "default": "None",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "bank_off",
                        "type": "int",
                        "range": {
                            "min": 1,
                            "max": "NUM_BANKS",
                            "none": true
                        }
                    }
                }
            },
            {
                "name": "display",
                "default": "None",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "display",
                        "type": "any",
                        "comment": "DisplayLabel identifier (must be defined in display.py)"
                    }
                }
            },
            {
                "name": "id",
                "default": "False",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "id",
                        "advanced": true,
                        "type": "any",
                        "comment": "This ID can be used for Paging or custom callbacks, to enable/disable the action."
                    }
                }
            },
            {
                "name": "use_leds",
                "default": "True",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "use_leds",
                        "type": "bool",
                        "comment": "If disabled, the action will not use the LEDs of the switch"
                    }
                }
            },
            {
                "name": "enable_callback",
                "default": "None",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "enable_callback",
                        "advanced": true,
                        "type": "any",
                        "comment": "Callback instance to control dynamically whether the action should be enabled."
                    }
                }
            },
            {
                "name": "color_callback",
                "default": "None",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "color_callback",
                        "advanced": true,
                        "type": "any"
                    }
                }
            },
            {
                "name": "color",
                "default": "None",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "color",
                        "type": "color"
                    }
                }
            },
            {
                "name": "text_callback",
                "default": "None",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "text_callback",
                        "advanced": true,
                        "type": "any"
                    }
                }
            },
            {
                "name": "text",
                "default": "None",
                "comment": null,
                "meta": {
                    "data": {}
                }
            },
            {
                "name": "display_mode",
                "default": "RIG_SELECT_DISPLAY_TARGET_RIG",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "display_mode",
                        "comment": "Decides how the colors and texts are determined.",
                        "type": "select",
                        "values": [
                            {
                                "name": "Target Rig",
                                "value": "RIG_SELECT_DISPLAY_TARGET_RIG"
                            },
                            {
                                "name": "Current Rig",
                                "value": "RIG_SELECT_DISPLAY_CURRENT_RIG"
                            }
                        ]
                    }
                }
            },
            {
                "name": "morph_display",
                "default": "None",
                "comment": "Optional DisplayLabel to show morph color",
                "meta": {
                    "data": {
                        "name": "morph_display",
                        "type": "any",
                        "advanced": true
                    }
                }
            },
            {
                "name": "morph_use_leds",
                "default": "True",
                "comment": "Use the LEDs to show morph state?",
                "meta": {
                    "data": {
                        "name": "morph_use_leds",
                        "type": "bool",
                        "advanced": true
                    }
                }
            },
            {
                "name": "morph_id",
                "default": "None",
                "comment": "Separate ID for the morph action. Default is the same id as specified with the \"id\" parameter.",
                "meta": {
                    "data": {
                        "name": "morph_id",
                        "type": "any",
                        "advanced": true
                    }
                }
            },
            {
                "name": "morph_only_when_enabled",
                "default": "True",
                "comment": "Only show the morph state when the \"on\" rig is selected",
                "meta": {
                    "data": {
                        "name": "morph_only_when_enabled",
                        "type": "bool",
                        "advanced": true
                    }
                }
            },
            {
                "name": "morph_color_base",
                "default": "Colors.RED",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "morph_color_base",
                        "type": "color",
                        "advanced": true
                    }
                }
            },
            {
                "name": "morph_color_morphed",
                "default": "Colors.BLUE",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "morph_color_morphed",
                        "type": "color",
                        "advanced": true
                    }
                }
            },
            {
                "name": "rig_btn_morph",
                "default": "False",
                "comment": "If set True, second press will trigger toggling the internal morphing state (no command is sent, just the displays are toggled). Only if no rig_off or bank_off are specified.",
                "meta": {
                    "data": {}
                }
            }
        ],
        "comment": "Adds morph state display on one LED to the rig select action.\nFor details on the parameters, see RIG_SELECT.",
        "importPath": "pyswitch.clients.kemper.actions.rig_select_and_morph_state",
        "meta": {
            "data": {
                "category": "rig"
            }
        }
    },
    {
        "name": "RIG_UP",
        "parameters": [
            {
                "name": "keep_bank",
                "default": "True",
                "comment": "If enabled, the bank is not changed when at the first and last rigs of a bank. If disabled, \nthe banks are stepped up/down after the last/first rigs of a bank.",
                "meta": {
                    "data": {}
                }
            },
            {
                "name": "display_mode",
                "default": "RIG_SELECT_DISPLAY_TARGET_RIG",
                "comment": "Display mode (see definitions above)",
                "meta": {
                    "data": {
                        "name": "display_mode",
                        "comment": "Decides how the colors and texts are determined.",
                        "type": "select",
                        "values": [
                            {
                                "name": "Target Rig",
                                "value": "RIG_SELECT_DISPLAY_TARGET_RIG"
                            },
                            {
                                "name": "Current Rig",
                                "value": "RIG_SELECT_DISPLAY_CURRENT_RIG"
                            }
                        ]
                    }
                }
            },
            {
                "name": "display",
                "default": "None",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "display",
                        "type": "any",
                        "comment": "DisplayLabel identifier (must be defined in display.py)"
                    }
                }
            },
            {
                "name": "id",
                "default": "False",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "id",
                        "advanced": true,
                        "type": "any",
                        "comment": "This ID can be used for Paging or custom callbacks, to enable/disable the action."
                    }
                }
            },
            {
                "name": "use_leds",
                "default": "True",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "use_leds",
                        "type": "bool",
                        "comment": "If disabled, the action will not use the LEDs of the switch"
                    }
                }
            },
            {
                "name": "enable_callback",
                "default": "None",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "enable_callback",
                        "advanced": true,
                        "type": "any",
                        "comment": "Callback instance to control dynamically whether the action should be enabled."
                    }
                }
            },
            {
                "name": "color_callback",
                "default": "None",
                "comment": "Optional callback for setting the color. Footprint: def callback(action, bank, rig) -> (r, g, b) where bank and rig are int starting from 0.",
                "meta": {
                    "data": {
                        "name": "color_callback",
                        "advanced": true,
                        "type": "any"
                    }
                }
            },
            {
                "name": "color",
                "default": "None",
                "comment": "Color override (if no text callback is passed)",
                "meta": {
                    "data": {
                        "name": "color",
                        "type": "color"
                    }
                }
            },
            {
                "name": "text_callback",
                "default": "None",
                "comment": "Optional callback for setting the text. Footprint: def callback(action, bank, rig) -> String where bank and rig are int starting from 0.",
                "meta": {
                    "data": {
                        "name": "text_callback",
                        "advanced": true,
                        "type": "any"
                    }
                }
            },
            {
                "name": "text",
                "default": "None",
                "comment": "Text override (if no text callback is passed)",
                "meta": {
                    "data": {}
                }
            }
        ],
        "comment": "Select next rig",
        "importPath": "pyswitch.clients.kemper.actions.rig_up_down",
        "meta": {
            "data": {
                "category": "rig"
            }
        }
    },
    {
        "name": "RIG_DOWN",
        "parameters": [
            {
                "name": "keep_bank",
                "default": "True",
                "comment": "If enabled, the bank is not changed when at the first and last rigs of a bank. If disabled, \nthe banks are stepped up/down after the last/first rigs of a bank.",
                "meta": {
                    "data": {}
                }
            },
            {
                "name": "display_mode",
                "default": "RIG_SELECT_DISPLAY_TARGET_RIG",
                "comment": "Display mode (see definitions above)",
                "meta": {
                    "data": {
                        "name": "display_mode",
                        "comment": "Decides how the colors and texts are determined.",
                        "type": "select",
                        "values": [
                            {
                                "name": "Target Rig",
                                "value": "RIG_SELECT_DISPLAY_TARGET_RIG"
                            },
                            {
                                "name": "Current Rig",
                                "value": "RIG_SELECT_DISPLAY_CURRENT_RIG"
                            }
                        ]
                    }
                }
            },
            {
                "name": "display",
                "default": "None",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "display",
                        "type": "any",
                        "comment": "DisplayLabel identifier (must be defined in display.py)"
                    }
                }
            },
            {
                "name": "id",
                "default": "False",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "id",
                        "advanced": true,
                        "type": "any",
                        "comment": "This ID can be used for Paging or custom callbacks, to enable/disable the action."
                    }
                }
            },
            {
                "name": "use_leds",
                "default": "True",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "use_leds",
                        "type": "bool",
                        "comment": "If disabled, the action will not use the LEDs of the switch"
                    }
                }
            },
            {
                "name": "enable_callback",
                "default": "None",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "enable_callback",
                        "advanced": true,
                        "type": "any",
                        "comment": "Callback instance to control dynamically whether the action should be enabled."
                    }
                }
            },
            {
                "name": "color_callback",
                "default": "None",
                "comment": "Optional callback for setting the color. Footprint: def callback(action, bank, rig) -> (r, g, b) where bank and rig are int starting from 0.",
                "meta": {
                    "data": {
                        "name": "color_callback",
                        "advanced": true,
                        "type": "any"
                    }
                }
            },
            {
                "name": "color",
                "default": "None",
                "comment": "Color override (if no text callback is passed)",
                "meta": {
                    "data": {
                        "name": "color",
                        "type": "color"
                    }
                }
            },
            {
                "name": "text_callback",
                "default": "None",
                "comment": "Optional callback for setting the text. Footprint: def callback(action, bank, rig) -> String where bank and rig are int starting from 0.",
                "meta": {
                    "data": {
                        "name": "text_callback",
                        "advanced": true,
                        "type": "any"
                    }
                }
            },
            {
                "name": "text",
                "default": "None",
                "comment": "Text override (if no text callback is passed)",
                "meta": {
                    "data": {}
                }
            }
        ],
        "comment": "Select previous rig",
        "importPath": "pyswitch.clients.kemper.actions.rig_up_down",
        "meta": {
            "data": {
                "category": "rig"
            }
        }
    },
    {
        "name": "RIG_SELECT",
        "parameters": [
            {
                "name": "rig",
                "default": null,
                "comment": null,
                "meta": {
                    "data": {
                        "name": "rig",
                        "type": "int",
                        "range": {
                            "min": 1,
                            "max": "NUM_RIGS_PER_BANK"
                        }
                    }
                }
            },
            {
                "name": "rig_off",
                "default": "None",
                "comment": "If set, this defines the \"off\" rig chosen when the action is disabled. Set to \"auto\" to always remember the current rig as \"off\" rig",
                "meta": {
                    "data": {
                        "name": "rig_off",
                        "type": "int",
                        "range": {
                            "min": 1,
                            "max": "NUM_RIGS_PER_BANK",
                            "none": true
                        }
                    }
                }
            },
            {
                "name": "bank",
                "default": "None",
                "comment": "If set, a specific bank is selected. If None, the current bank is kept",
                "meta": {
                    "data": {
                        "name": "bank",
                        "type": "int",
                        "range": {
                            "min": 1,
                            "max": "NUM_BANKS"
                        }
                    }
                }
            },
            {
                "name": "bank_off",
                "default": "None",
                "comment": "If set, this defines the \"off\" bank to be chosen when the action is disabled. Set to \"auto\" to always remember the current bank as \"off\" bank",
                "meta": {
                    "data": {
                        "name": "bank_off",
                        "type": "int",
                        "range": {
                            "min": 1,
                            "max": "NUM_BANKS",
                            "none": true
                        }
                    }
                }
            },
            {
                "name": "display_mode",
                "default": "RIG_SELECT_DISPLAY_CURRENT_RIG",
                "comment": "Display mode (see definitions above)",
                "meta": {
                    "data": {
                        "name": "display_mode",
                        "comment": "Decides how the colors and texts are determined.",
                        "type": "select",
                        "values": [
                            {
                                "name": "Target Rig",
                                "value": "RIG_SELECT_DISPLAY_TARGET_RIG"
                            },
                            {
                                "name": "Current Rig",
                                "value": "RIG_SELECT_DISPLAY_CURRENT_RIG"
                            }
                        ]
                    }
                }
            },
            {
                "name": "display",
                "default": "None",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "display",
                        "type": "any",
                        "comment": "DisplayLabel identifier (must be defined in display.py)"
                    }
                }
            },
            {
                "name": "id",
                "default": "False",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "id",
                        "advanced": true,
                        "type": "any",
                        "comment": "This ID can be used for Paging or custom callbacks, to enable/disable the action."
                    }
                }
            },
            {
                "name": "use_leds",
                "default": "True",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "use_leds",
                        "type": "bool",
                        "comment": "If disabled, the action will not use the LEDs of the switch"
                    }
                }
            },
            {
                "name": "enable_callback",
                "default": "None",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "enable_callback",
                        "advanced": true,
                        "type": "any",
                        "comment": "Callback instance to control dynamically whether the action should be enabled."
                    }
                }
            },
            {
                "name": "color_callback",
                "default": "None",
                "comment": "Optional callback for setting the color. Footprint: def callback(action, bank, rig) -> (r, g, b) where bank and rig are int starting from 0.",
                "meta": {
                    "data": {
                        "name": "color_callback",
                        "advanced": true,
                        "type": "any"
                    }
                }
            },
            {
                "name": "color",
                "default": "None",
                "comment": "Color override (if no text callback is passed)",
                "meta": {
                    "data": {
                        "name": "color",
                        "type": "color"
                    }
                }
            },
            {
                "name": "text_callback",
                "default": "None",
                "comment": "Optional callback for setting the text. Footprint: def callback(action, bank, rig) -> String where bank and rig are int starting from 0.",
                "meta": {
                    "data": {
                        "name": "text_callback",
                        "advanced": true,
                        "type": "any"
                    }
                }
            },
            {
                "name": "text",
                "default": "None",
                "comment": "Text override (if no text callback is passed)",
                "meta": {
                    "data": {}
                }
            },
            {
                "name": "auto_exclude_rigs",
                "default": "None",
                "comment": "If rig_off is \"auto\", this can be filled with a tuple or list of rigs to exclude from \"remembering\" when disabled",
                "meta": {
                    "data": {
                        "name": "auto_exclude_rigs",
                        "type": "any",
                        "advanced": true
                    }
                }
            },
            {
                "name": "rig_btn_morph",
                "default": "False",
                "comment": "If set True, second press will trigger toggling the internal morphing state (no command is sent, just the displays are toggled). Only if no rig_off or bank_off are specified.",
                "meta": {
                    "data": {}
                }
            }
        ],
        "comment": "Selects a specific rig, or toggles between two rigs (if rig_off is also provided) in\nthe current bank. Rigs are indexed starting from one, range: [1..5].",
        "importPath": "pyswitch.clients.kemper.actions.rig_select",
        "meta": {
            "data": {
                "category": "rig"
            }
        }
    },
    {
        "name": "TUNER_MODE",
        "parameters": [
            {
                "name": "display",
                "default": "None",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "display",
                        "type": "any",
                        "comment": "DisplayLabel identifier (must be defined in display.py)"
                    }
                }
            },
            {
                "name": "mode",
                "default": "PushButtonAction.HOLD_MOMENTARY",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "mode",
                        "type": "select",
                        "comment": "Mode of operation",
                        "values": [
                            {
                                "name": "Latch",
                                "value": "PushButtonAction.LATCH"
                            },
                            {
                                "name": "Latch (momentary on long press)",
                                "value": "PushButtonAction.HOLD_MOMENTARY"
                            },
                            {
                                "name": "Momentary",
                                "value": "PushButtonAction.MOMENTARY"
                            },
                            {
                                "name": "Momentary (inverse)",
                                "value": "PushButtonAction.MOMENTARY_INVERSE"
                            },
                            {
                                "name": "Enable only",
                                "value": "PushButtonAction.ENABLE"
                            },
                            {
                                "name": "Disable only",
                                "value": "PushButtonAction.DISABLE"
                            },
                            {
                                "name": "One Shot",
                                "value": "PushButtonAction.ONE_SHOT"
                            }
                        ]
                    }
                }
            },
            {
                "name": "color",
                "default": "DEFAULT_SWITCH_COLOR",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "color",
                        "type": "color"
                    }
                }
            },
            {
                "name": "text",
                "default": "\"Tuner\"",
                "comment": null,
                "meta": {
                    "data": {}
                }
            },
            {
                "name": "id",
                "default": "False",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "id",
                        "advanced": true,
                        "type": "any",
                        "comment": "This ID can be used for Paging or custom callbacks, to enable/disable the action."
                    }
                }
            },
            {
                "name": "use_leds",
                "default": "True",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "use_leds",
                        "type": "bool",
                        "comment": "If disabled, the action will not use the LEDs of the switch"
                    }
                }
            },
            {
                "name": "enable_callback",
                "default": "None",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "enable_callback",
                        "advanced": true,
                        "type": "any",
                        "comment": "Callback instance to control dynamically whether the action should be enabled."
                    }
                }
            }
        ],
        "comment": "Switch tuner mode on / off",
        "importPath": "pyswitch.clients.kemper.actions.tuner",
        "meta": {
            "data": {
                "category": "tuner"
            }
        }
    },
    {
        "name": "BINARY_SWITCH",
        "parameters": [
            {
                "name": "mapping",
                "default": null,
                "comment": null,
                "meta": {
                    "data": {
                        "name": "mapping",
                        "default": "MAPPING_ROTARY_SPEED(slot_id = KemperEffectSlot.EFFECT_SLOT_ID_MOD)"
                    }
                }
            },
            {
                "name": "display",
                "default": "None",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "display",
                        "type": "any",
                        "comment": "DisplayLabel identifier (must be defined in display.py)"
                    }
                }
            },
            {
                "name": "text",
                "default": "\"\"",
                "comment": null,
                "meta": {
                    "data": {}
                }
            },
            {
                "name": "mode",
                "default": "PushButtonAction.HOLD_MOMENTARY",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "mode",
                        "type": "select",
                        "comment": "Mode of operation",
                        "values": [
                            {
                                "name": "Latch",
                                "value": "PushButtonAction.LATCH"
                            },
                            {
                                "name": "Latch (momentary on long press)",
                                "value": "PushButtonAction.HOLD_MOMENTARY"
                            },
                            {
                                "name": "Momentary",
                                "value": "PushButtonAction.MOMENTARY"
                            },
                            {
                                "name": "Momentary (inverse)",
                                "value": "PushButtonAction.MOMENTARY_INVERSE"
                            },
                            {
                                "name": "Enable only",
                                "value": "PushButtonAction.ENABLE"
                            },
                            {
                                "name": "Disable only",
                                "value": "PushButtonAction.DISABLE"
                            },
                            {
                                "name": "One Shot",
                                "value": "PushButtonAction.ONE_SHOT"
                            }
                        ]
                    }
                }
            },
            {
                "name": "color",
                "default": "Colors.WHITE",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "color",
                        "type": "color"
                    }
                }
            },
            {
                "name": "id",
                "default": "False",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "id",
                        "advanced": true,
                        "type": "any",
                        "comment": "This ID can be used for Paging or custom callbacks, to enable/disable the action."
                    }
                }
            },
            {
                "name": "use_leds",
                "default": "True",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "use_leds",
                        "type": "bool",
                        "comment": "If disabled, the action will not use the LEDs of the switch"
                    }
                }
            },
            {
                "name": "enable_callback",
                "default": "None",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "enable_callback",
                        "advanced": true,
                        "type": "any",
                        "comment": "Callback instance to control dynamically whether the action should be enabled."
                    }
                }
            },
            {
                "name": "value_on",
                "default": "1",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "value_on",
                        "type": "any",
                        "advanced": true
                    }
                }
            },
            {
                "name": "value_off",
                "default": "0",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "value_off",
                        "type": "any",
                        "advanced": true
                    }
                }
            },
            {
                "name": "reference_value",
                "default": "None",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "reference_value",
                        "type": "any",
                        "advanced": true
                    }
                }
            },
            {
                "name": "comparison_mode",
                "default": "BinaryParameterCallback.GREATER_EQUAL",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "comparison_mode",
                        "type": "select",
                        "comment": "For incoming parameter values, this decides how the new values will be compared to the reference value (or on value) to update the state of the action",
                        "advanced": true,
                        "values": [
                            {
                                "name": "Equal",
                                "value": "BinaryParameterCallback.EQUAL"
                            },
                            {
                                "name": "Greater than",
                                "value": "BinaryParameterCallback.GREATER"
                            },
                            {
                                "name": "Greater or equal",
                                "value": "BinaryParameterCallback.GREATER_EQUAL"
                            },
                            {
                                "name": "Less than",
                                "value": "BinaryParameterCallback.LESS"
                            },
                            {
                                "name": "Less or equal",
                                "value": "BinaryParameterCallback.LESS_EQUAL"
                            },
                            {
                                "name": "Do not change state",
                                "value": "BinaryParameterCallback.NO_STATE_CHANGE"
                            }
                        ]
                    }
                }
            }
        ],
        "comment": "Generic switch action which can be used for all parameter mappings",
        "importPath": "pyswitch.clients.kemper.actions.binary_switch",
        "meta": {
            "data": {}
        }
    },
    {
        "name": "EFFECT_BUTTON",
        "parameters": [
            {
                "name": "num",
                "default": null,
                "comment": "Number of the Effect Button (1 to 4)",
                "meta": {
                    "data": {
                        "name": "num",
                        "type": "int",
                        "range": {
                            "min": 1,
                            "max": 4
                        }
                    }
                }
            },
            {
                "name": "text",
                "default": "None",
                "comment": null,
                "meta": {
                    "data": {}
                }
            },
            {
                "name": "display",
                "default": "None",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "display",
                        "type": "any",
                        "comment": "DisplayLabel identifier (must be defined in display.py)"
                    }
                }
            },
            {
                "name": "color",
                "default": "Colors.LIGHT_GREEN",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "color",
                        "type": "color"
                    }
                }
            },
            {
                "name": "id",
                "default": "False",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "id",
                        "advanced": true,
                        "type": "any",
                        "comment": "This ID can be used for Paging or custom callbacks, to enable/disable the action."
                    }
                }
            },
            {
                "name": "use_leds",
                "default": "True",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "use_leds",
                        "type": "bool",
                        "comment": "If disabled, the action will not use the LEDs of the switch"
                    }
                }
            },
            {
                "name": "enable_callback",
                "default": "None",
                "comment": null,
                "meta": {
                    "data": {
                        "name": "enable_callback",
                        "advanced": true,
                        "type": "any",
                        "comment": "Callback instance to control dynamically whether the action should be enabled."
                    }
                }
            },
            {
                "name": "use_internal_state",
                "default": "True",
                "comment": "If enabled, the state of the display will be toggled no matter what the real status on the Kemper is (the Kemper sadly does not report the state at all). ",
                "meta": {
                    "data": {
                        "name": "use_internal_state",
                        "type": "bool",
                        "advanced": true
                    }
                }
            }
        ],
        "comment": "Effect Button I-IIII (set only). num must be a number (1 to 4).\nNOTE: The state of the display will be toggled no matter what the real status on the Kemper is (the Kemper sadly does not report the state at all). \nIf you dont want this behaviour, you can set \"use_internal_state = False\".",
        "importPath": "pyswitch.clients.kemper.actions.effect_button",
        "meta": {
            "data": {
                "category": "effects"
            }
        }
    },
    {
        "name": "BANK_SELECT",
        "parameters": [
            {
                "name": "bank",
                "default": null,
                "comment": "Bank to select",
                "meta": {
                    "data": {
                        "name": "bank",
                        "type": "int",
                        "range": {
                            "min": 1,
                            "max": "NUM_BANKS"
                        }
                    }
                }
            },
            {
                "name": "bank_off",
                "default": "None",
                "comment": "\"off\" bank, to toggle between banks. Will be ignored when preselect is enabled.",
                "meta": {
                    "data": {
                        "name": "bank_off",
                        "type": "int",
                        "range": {
                            "min": 1,
                            "max": "NUM_BANKS",
                            "none": true
                        }
                    }
                }
            },
            {
                "name": "preselect",
                "default": "False",
                "comment": "If False, the bank is switched immediately (by sending a rig select command \nafter bank preselect). If True, only the bank preselect is sent. Ignores bank_off.",
                "meta": {
                    "data": {}
                }
            },
            {
                "name": "display_mode",
                "default": "RIG_SELECT_DISPLAY_CURRENT_RIG",
                "comment": "Display mode",
                "meta": {
                    "data": {
                        "name": "display_mode",
                        "comment": "Decides how the colors and texts are determined.",
                        "type": "select",
                        "values": [
                            {
                                "name": "Target Rig",
                                "value": "RIG_SELECT_DISPLAY_TARGET_RIG"
                            },
                            {
                                "name": "Current Rig",
                                "value": "RIG_SELECT_DISPLAY_CURRENT_RIG"
                            }
                        ]
                    }
                }
            },
            {
                "name": "display",
                "default": "None",
                "comment": "Reference to a DisplayLabel",
                "meta": {
                    "data": {
                        "name": "display",
                        "type": "any",
                        "comment": "DisplayLabel identifier (must be defined in display.py)"
                    }
                }
            },
            {
                "name": "id",
                "default": "False",
                "comment": "ID for paging / enable callbacks",
                "meta": {
                    "data": {
                        "name": "id",
                        "advanced": true,
                        "type": "any",
                        "comment": "This ID can be used for Paging or custom callbacks, to enable/disable the action."
                    }
                }
            },
            {
                "name": "use_leds",
                "default": "True",
                "comment": "Use the switch LEDs",
                "meta": {
                    "data": {
                        "name": "use_leds",
                        "type": "bool",
                        "comment": "If disabled, the action will not use the LEDs of the switch"
                    }
                }
            },
            {
                "name": "enable_callback",
                "default": "None",
                "comment": "Optional callback to enable/disable the action depeinding on things",
                "meta": {
                    "data": {
                        "name": "enable_callback",
                        "advanced": true,
                        "type": "any",
                        "comment": "Callback instance to control dynamically whether the action should be enabled."
                    }
                }
            },
            {
                "name": "color_callback",
                "default": "None",
                "comment": "Optional callback for setting the color. Scheme: \ndef callback(action, bank, rig) -> (r, g, b) where bank and rig are integers starting from 0.",
                "meta": {
                    "data": {
                        "name": "color_callback",
                        "advanced": true,
                        "type": "any"
                    }
                }
            },
            {
                "name": "color",
                "default": "None",
                "comment": "Static color (if no color callback is passed)",
                "meta": {
                    "data": {
                        "name": "color",
                        "type": "color"
                    }
                }
            },
            {
                "name": "text_callback",
                "default": "None",
                "comment": "Callback for setting the text. Scheme: \ndef callback(action, bank, rig) -> String where bank and rig are integers starting from 0.",
                "meta": {
                    "data": {
                        "name": "text_callback",
                        "advanced": true,
                        "type": "any"
                    }
                }
            },
            {
                "name": "text",
                "default": "None",
                "comment": "Static text (if no text callback is passed)",
                "meta": {
                    "data": {}
                }
            }
        ],
        "comment": "Selects a specific bank, keeping the current rig, or toggles between two banks (if bank_off is also provided). \nBanks are indexed starting from one, range: [1..126].",
        "importPath": "pyswitch.clients.kemper.actions.bank_select",
        "meta": {
            "data": {
                "category": "bank"
            }
        }
    }
]